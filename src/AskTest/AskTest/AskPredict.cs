// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace AskTest{
// x y vx vy \theta dtheta list of objectIDs that you already have
/**
 * Class that performs predictions based on sensor hints (location, speed).
 * Prediction is split into translational and rotational updates.
 * This will return points for the server to query.
 *
 * Moreover, we also implement a function that can be used as an oracle to
 * take out false positives introduced due to the aggressive querying.
 */
//Strategy here is to send the mappings in a fixed radius whose center is predicted using vx, vy

	public class AskPredict {

		float[] centerPoint = new float[2];
		float[] speedVec = new float[3];
		float viewRadius;
		float RTT;

		public AskPredict(FetchQuery fetchQuery){
			centerPoint = fetchQuery.centerPoint;
			speedVec = fetchQuery.speedVec;
			viewRadius = fetchQuery.viewRadius;
			RTT = fetchQuery.RTT;
		}


		// Here compassAngle I'm assuming to be the angle of horizontal 
		// axis with rectangle covering vision
		public float[] PredictTotal(){
			float xCoord = centerPoint[0]+RTT*speedVec[0];
			float yCoord = centerPoint[1]+RTT*speedVec[1];
			float[] queryPoints = new float [2];
			queryPoints[0]=xCoord;
			queryPoints[1]=yCoord;
			return queryPoints; 

		}

	}
}